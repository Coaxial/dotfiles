#!/usr/bin/env bash
# ^ Enables ShellCheck

# A nicer prompt
# Colours and help from: https://github.com/nicholasjhenry/dotfiles/blob/master/bash/prompt
# And also http://misc.flogisoft.com/bash/tip_colors_and_formatting
# And http://mywiki.wooledge.org/BashFAQ/053

function bash_prompt {
  # Define some colors
  # regular colors
  # shellcheck disable=SC2034
  k="\[\e[0;30m\]"    # black
  # shellcheck disable=SC2034
  r="\[\e[0;31m\]"    # red
  # shellcheck disable=SC2034
  g="\[\e[0;32m\]"    # green
  # shellcheck disable=SC2034
  y="\[\e[0;33m\]"    # yellow
  # shellcheck disable=SC2034
  b="\[\e[0;34m\]"    # blue
  # shellcheck disable=SC2034
  m="\[\e[0;35m\]"    # magenta
  # shellcheck disable=SC2034
  c="\[\e[0;36m\]"    # cyan
  # shellcheck disable=SC2034
  w="\[\e[0;37m\]"    # white

  # emphasized (bolded) colors
  # shellcheck disable=SC2034
  emk="\[\e[1;30m\]"
  # shellcheck disable=SC2034
  emr="\[\e[1;31m\]"
  # shellcheck disable=SC2034
  emg="\[\e[1;32m\]"
  # shellcheck disable=SC2034
  emy="\[\e[1;33m\]"
  # shellcheck disable=SC2034
  emb="\[\e[1;34m\]"
  # shellcheck disable=SC2034
  emm="\[\e[1;35m\]"
  # shellcheck disable=SC2034
  emc="\[\e[1;36m\]"
  # shellcheck disable=SC2034
  emw="\[\e[1;37m\]"

  # background colors
  # shellcheck disable=SC2034
  bgk="\[\e[40m\]"
  # shellcheck disable=SC2034
  bgr="\[\e[41m\]"
  # shellcheck disable=SC2034
  bgg="\[\e[42m\]"
  # shellcheck disable=SC2034
  bgy="\[\e[43m\]"
  # shellcheck disable=SC2034
  bgb="\[\e[44m\]"
  # shellcheck disable=SC2034
  bgm="\[\e[45m\]"
  # shellcheck disable=SC2034
  bgc="\[\e[46m\]"
  # shellcheck disable=SC2034
  bgw="\[\e[47m\]"

  reset="\[\e[0m\]"

  # shellcheck disable=SC2034
  UC=$w                       # user's color
  # shellcheck disable=SC2034
  [ $UID -eq "0" ] && UC=$r   # root's color

  # Some helper functions
  # Heavily inspired from http://blog.deadlypenguin.com/blog/2013/10/24/adding-git-status-to-bash/
  function _git_prompt {
    local git_status
    git_status="$(git status -unormal 2>&1)"
    if ! [[ "$git_status" =~ Not\ a\ git\ repo ]]; then
      if [[ "$git_status" =~ nothing\ to\ commit ]]; then
        local ansi=$emg
      elif [[ "$git_status" =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then
        local ansi=$emr
      else
        local ansi=$emy
      fi
      if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then
        branch=${BASH_REMATCH[1]}
        #test "$branch" != master || branch=' '
      else
        # Detached HEAD.  (branch=HEAD is a faster alternative.)
        branch="($(git describe --all --contains --abbrev=4 HEAD 2> /dev/null ||
          echo HEAD))"
      fi
      echo -n "[${ansi}·ö† $branch$reset] "
    fi
  }

  function _rebase_warning {
    if [ -d ./.git/rebase-merge/ ]; then
      echo -n "$emy""‚ö†Ô∏è  Rebasing ‚ö†Ô∏è  ""$reset"
    fi
  }

  function _ruby_version {
    local ruby_version
    local ruby_icon
    ruby_version=$("$HOME/.rvm/bin/rvm-prompt")

    if [ ! -z "$ruby_version" ]; then
      # OSX and iTerm2 can show emojis in the terminal, which have a different
      # width than on Linux. This workwround inserts an extra blank space for
      # OSX so the Ruby and the actual version aren't too close one to another.
      if [ "$(uname)" == "Darwin" ]; then
        ruby_icon='üíé  '
      else
        ruby_icon='üíé '
      fi

      echo "[${emr}$ruby_icon$ruby_version$reset] "
    fi
  }

  function _node_version {
    local node_version
    node_version=$(node -v)

    if [ ! -z "$node_version" ]; then
      echo "[${emg}‚¨¢  $node_version$reset] "
    fi
  }

  export PROMPT_COMMAND='export PS1="\n$reset$(_git_prompt)$(_ruby_version)$(_node_version)$emc\w$reset\n$m\u@$emm\h$b \$ $(_rebase_warning)$reset";'
}

bash_prompt
